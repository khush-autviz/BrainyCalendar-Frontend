name: Deploy to EC2

on:
  push:
    branches:
      - main
      - test
  workflow_dispatch:

env:
  DOCKER_IMAGE: appi17/brainybossfrontend

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Environment Variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "BRANCH=main" >> $GITHUB_ENV
            echo "PORT=80" >> $GITHUB_ENV
          else
            echo "BRANCH=test" >> $GITHUB_ENV
            echo "PORT=81" >> $GITHUB_ENV
          fi
          echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t $DOCKER_IMAGE:${{ env.IMAGE_TAG }} .
          docker tag $DOCKER_IMAGE:${{ env.IMAGE_TAG }} $DOCKER_IMAGE:latest
          docker push $DOCKER_IMAGE:${{ env.IMAGE_TAG }}
          docker push $DOCKER_IMAGE:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Set Environment Variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "BRANCH=main" >> $GITHUB_ENV
            echo "PORT=80" >> $GITHUB_ENV
          else
            echo "BRANCH=test" >> $GITHUB_ENV
            echo "PORT=81" >> $GITHUB_ENV
          fi
          echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ github.ref == 'refs/heads/main' && secrets.EC2_HOST || secrets.TEST_EC2_HOST }}
          username: ubuntu
          key: ${{ github.ref == 'refs/heads/main' && secrets.SSH_PRIVATE_KEY_PROD || secrets.SSH_PRIVATE_KEY }}
          script: |
            # Authenticate with Docker Hub
            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{secrets.DOCKER_USERNAME}}" --password-stdin
            # Pull latest Docker image
            DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
            echo "Using image: $DOCKER_IMAGE"
            
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            docker pull $DOCKER_IMAGE:latest

            # Stop and remove old container
            if [ "$(docker ps -q -f name=autestate-ui-container)" ]; then
              docker stop autestate-ui-container
              docker rm autestate-ui-container
            fi

            # Start new container
            docker run -d \
              --name autestate-ui-container \
              -p ${{ env.PORT }}:80 \
              $DOCKER_IMAGE:latest
